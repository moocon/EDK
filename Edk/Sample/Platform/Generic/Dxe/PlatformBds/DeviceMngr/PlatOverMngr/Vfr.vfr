// *++
//
// Copyright (c) 2007, Intel Corporation                                                         
// All rights reserved. This program and the accompanying materials                          
// are licensed and made available under the terms and conditions of the BSD License         
// which accompanies this distribution.  The full text of the license may be found at        
// http://opensource.org/licenses/bsd-license.php                                            
//                                                                                           
// THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,                     
// WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.             
// 
// Module Name:
//
//   Vfr.vfr 
// 
// Abstract:
// 
//   Platform driver Override manager formset
// 
// 
// --*/


#include "PlatOverMngrStrDefs.h" 
 
#define FORMSET_GUID \
  { \
    0x8614567d, 0x35be, 0x4415, 0x8d, 0x88, 0xbd, 0x7d, 0xc, 0x9c, 0x70, 0xc0 \
  }
  
typedef struct {
  UINT8   DriSelection[100];
  UINT8   DriOrder[100];
  UINT8   PciDeviceFilter;
} MyIfrNVData;
  
  
#define EFI_DISK_DEVICE_CLASS              0x01

formset 
  guid     = FORMSET_GUID,
  title    = STRING_TOKEN(STR_ENTRY_TITLE),  
  help     = STRING_TOKEN(STR_TITLE_HELP), 
  class    = EFI_DISK_DEVICE_CLASS,      
  subclass = 0xff,
  
  form formid = 0x1234,            
       title = STRING_TOKEN(STR_TITLE);  

  	text 
      help   = STRING_TOKEN(STR_FIRST_REFRESH_HELP),  
      text   = STRING_TOKEN(STR_FIRST_REFRESH),
	    text   = STRING_TOKEN(STR_NULL_STRING),
      flags  = INTERACTIVE,
      key    = 0x1234;
      
    checkbox varid    = MyIfrNVData.PciDeviceFilter,
      prompt   = STRING_TOKEN(STR_PCI_DEVICE_FILTER_PROMPT),
      help     = STRING_TOKEN(STR_PCI_DEVICE_FILTER_HELP),  
      flags    = INTERACTIVE,
      key      = 0x1235,
    endcheckbox;
      
    label 0x1234;
      
  endform;
  
  form formid = 0x1200,            
       title = STRING_TOKEN(STR_TITLE);  
       
    goto 0x1234,        
      prompt  = STRING_TOKEN(STR_GOTO_PREVIOUS), 
      help    = STRING_TOKEN(STR_NULL_STRING),
      flags   = INTERACTIVE, 
      key     = 0x1234; 
      
    goto 0x1500,        
      prompt  = STRING_TOKEN(STR_TITLE_ORDER), 
      help    = STRING_TOKEN(STR_TITLE_ORDER_HELP),
      flags   = INTERACTIVE, 
      key     = 0x1500; 
      
    label 0x1200;       
    

  endform;
 
  form formid = 0x1500,            
       title = STRING_TOKEN(STR_TITLE);  
       
    goto 0x1200,        
      prompt  = STRING_TOKEN(STR_GOTO_PREVIOUS), 
      help    = STRING_TOKEN(STR_NULL_STRING),
      flags   = INTERACTIVE, 
      key     = 0x2000; 
      
    label 0x1500;       
    label 0x1501;   
    subtitle text = STRING_TOKEN(STR_NULL_STRING);
    
    goto 0x1500,        
      prompt  = STRING_TOKEN(STR_SAVE_AND_EXIT), 
      help    = STRING_TOKEN(STR_NULL_STRING),
      flags   = INTERACTIVE | RESET_REQUIRED, 
      key     = 0x1800; 
  endform;

  //
  // This dummy form is used to include the needed string
  //
  form formid = 1,
       title  = STRING_TOKEN(STR_GOTO_HELP_DRIVER);  

    text 
      help   = STRING_TOKEN(STR_GOTO_HELP_DRIVER),  
      text   = STRING_TOKEN(STR_GOTO_HELP_DRIVER),
	    text   = STRING_TOKEN(STR_GOTO_HELP_DRIVER),
      flags  = INTERACTIVE,
      key    = 0x1234;
    text 
      help   = STRING_TOKEN(STR_REFRESH),  
      text   = STRING_TOKEN(STR_REFRESH_HELP),
	    text   = STRING_TOKEN(STR_DRIVER_DEFAULT_NAME),
      flags  = INTERACTIVE,
      key    = 0x1234;
  endform;
  
endformset;
